
Ex_5_SWITCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000954  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002db  00000000  00000000  0000136b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041a  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000142  00000000  00000000  00001a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	41 c0       	rjmp	.+130    	; 0x11e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>

int main(void){
	unsigned char Switch_flag =0, Switch_flag_pre = 0x01;
	
	DDRA = 0x0F;
  9e:	8f e0       	ldi	r24, 0x0F	; 15
  a0:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
  a2:	11 ba       	out	0x11, r1	; 17
	PORTA = 0x00;
  a4:	1b ba       	out	0x1b, r1	; 27

#include <avr/io.h>
#include <util/delay.h>

int main(void){
	unsigned char Switch_flag =0, Switch_flag_pre = 0x01;
  a6:	91 e0       	ldi	r25, 0x01	; 1

		if((Switch_flag == 0x01) || (Switch_flag == 0x02) || (Switch_flag == 0x04) || (Switch_flag == 0x08)){
			Switch_flag_pre = Switch_flag;
		}

		PORTA ^= 0x0F;
  a8:	2f e0       	ldi	r18, 0x0F	; 15
	DDRA = 0x0F;
	DDRD = 0x00;
	PORTA = 0x00;

	while(1){
		Switch_flag = PIND >> 4;
  aa:	80 b3       	in	r24, 0x10	; 16
  ac:	82 95       	swap	r24
  ae:	8f 70       	andi	r24, 0x0F	; 15

		if((Switch_flag == 0x01) || (Switch_flag == 0x02) || (Switch_flag == 0x04) || (Switch_flag == 0x08)){
  b0:	3f ef       	ldi	r19, 0xFF	; 255
  b2:	38 0f       	add	r19, r24
  b4:	32 30       	cpi	r19, 0x02	; 2
  b6:	28 f0       	brcs	.+10     	; 0xc2 <main+0x24>
  b8:	84 30       	cpi	r24, 0x04	; 4
  ba:	19 f0       	breq	.+6      	; 0xc2 <main+0x24>
  bc:	88 30       	cpi	r24, 0x08	; 8
  be:	09 f0       	breq	.+2      	; 0xc2 <main+0x24>
  c0:	89 2f       	mov	r24, r25
			Switch_flag_pre = Switch_flag;
		}

		PORTA ^= 0x0F;
  c2:	9b b3       	in	r25, 0x1b	; 27
  c4:	92 27       	eor	r25, r18
  c6:	9b bb       	out	0x1b, r25	; 27

		if(Switch_flag_pre == 0x01) _delay_ms(250);
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	41 f4       	brne	.+16     	; 0xdc <main+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	3f ef       	ldi	r19, 0xFF	; 255
  ce:	4f e9       	ldi	r20, 0x9F	; 159
  d0:	95 e0       	ldi	r25, 0x05	; 5
  d2:	31 50       	subi	r19, 0x01	; 1
  d4:	40 40       	sbci	r20, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x34>
  da:	13 c0       	rjmp	.+38     	; 0x102 <main+0x64>
		else if(Switch_flag_pre == 0x02) _delay_ms(500);
  dc:	82 30       	cpi	r24, 0x02	; 2
  de:	41 f4       	brne	.+16     	; 0xf0 <main+0x52>
  e0:	3f ef       	ldi	r19, 0xFF	; 255
  e2:	4f e3       	ldi	r20, 0x3F	; 63
  e4:	9b e0       	ldi	r25, 0x0B	; 11
  e6:	31 50       	subi	r19, 0x01	; 1
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x48>
  ee:	09 c0       	rjmp	.+18     	; 0x102 <main+0x64>
		else if(Switch_flag_pre == 0x04) _delay_ms(750);
  f0:	84 30       	cpi	r24, 0x04	; 4
  f2:	59 f4       	brne	.+22     	; 0x10a <main+0x6c>
  f4:	3f ef       	ldi	r19, 0xFF	; 255
  f6:	4f ed       	ldi	r20, 0xDF	; 223
  f8:	90 e1       	ldi	r25, 0x10	; 16
  fa:	31 50       	subi	r19, 0x01	; 1
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x5c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x66>
 104:	00 00       	nop
 */ 

#include <avr/io.h>
#include <util/delay.h>

int main(void){
 106:	98 2f       	mov	r25, r24
 108:	d0 cf       	rjmp	.-96     	; 0xaa <main+0xc>
		PORTA ^= 0x0F;

		if(Switch_flag_pre == 0x01) _delay_ms(250);
		else if(Switch_flag_pre == 0x02) _delay_ms(500);
		else if(Switch_flag_pre == 0x04) _delay_ms(750);
		else if(Switch_flag_pre == 0x08) _delay_ms(1000);
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x68>
 10e:	3f ef       	ldi	r19, 0xFF	; 255
 110:	4f e7       	ldi	r20, 0x7F	; 127
 112:	96 e1       	ldi	r25, 0x16	; 22
 114:	31 50       	subi	r19, 0x01	; 1
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x76>
 11c:	f2 cf       	rjmp	.-28     	; 0x102 <main+0x64>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
