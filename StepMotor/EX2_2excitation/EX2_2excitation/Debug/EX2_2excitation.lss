
EX2_2excitation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097c  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e9  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000159  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001be5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	30 c0       	rjmp	.+96     	; 0xfc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
int main(void)
{
	unsigned char i;

	//DDRB = 0x80;
	DDRD = 0xf0;
  9e:	80 ef       	ldi	r24, 0xF0	; 240
  a0:	81 bb       	out	0x11, r24	; 17
    /* Replace with your application code */
    while (1) 
    {
		for(i=0; i<12 ; i++)
		{
			PORTD = 0x30; //00110000
  a2:	90 e3       	ldi	r25, 0x30	; 48
			_delay_ms(10);
			PORTD = 0x90; //1001
  a4:	20 e9       	ldi	r18, 0x90	; 144
			_delay_ms(10);
			PORTD = 0xC0; //1100
  a6:	30 ec       	ldi	r19, 0xC0	; 192
			_delay_ms(10);
			PORTD = 0x60; //0110;
  a8:	40 e6       	ldi	r20, 0x60	; 96

#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  aa:	8c e0       	ldi	r24, 0x0C	; 12
    /* Replace with your application code */
    while (1) 
    {
		for(i=0; i<12 ; i++)
		{
			PORTD = 0x30; //00110000
  ac:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	ef ef       	ldi	r30, 0xFF	; 255
  b0:	f7 e4       	ldi	r31, 0x47	; 71
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x14>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x1a>
  b8:	00 00       	nop
			_delay_ms(10);
			PORTD = 0x90; //1001
  ba:	22 bb       	out	0x12, r18	; 18
  bc:	ef ef       	ldi	r30, 0xFF	; 255
  be:	f7 e4       	ldi	r31, 0x47	; 71
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x22>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x28>
  c6:	00 00       	nop
			_delay_ms(10);
			PORTD = 0xC0; //1100
  c8:	32 bb       	out	0x12, r19	; 18
  ca:	ef ef       	ldi	r30, 0xFF	; 255
  cc:	f7 e4       	ldi	r31, 0x47	; 71
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x30>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x36>
  d4:	00 00       	nop
			_delay_ms(10);
			PORTD = 0x60; //0110;
  d6:	42 bb       	out	0x12, r20	; 18
  d8:	ef ef       	ldi	r30, 0xFF	; 255
  da:	f7 e4       	ldi	r31, 0x47	; 71
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x3e>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x44>
  e2:	00 00       	nop
  e4:	81 50       	subi	r24, 0x01	; 1
	//PORTB &= 0x80; // M1 Disable, DC모터 정지

    /* Replace with your application code */
    while (1) 
    {
		for(i=0; i<12 ; i++)
  e6:	11 f7       	brne	.-60     	; 0xac <main+0xe>
  e8:	ff ef       	ldi	r31, 0xFF	; 255
  ea:	5f e7       	ldi	r21, 0x7F	; 127
  ec:	66 e1       	ldi	r22, 0x16	; 22
  ee:	f1 50       	subi	r31, 0x01	; 1
  f0:	50 40       	sbci	r21, 0x00	; 0
  f2:	60 40       	sbci	r22, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x50>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x5a>
  f8:	00 00       	nop
  fa:	d7 cf       	rjmp	.-82     	; 0xaa <main+0xc>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
