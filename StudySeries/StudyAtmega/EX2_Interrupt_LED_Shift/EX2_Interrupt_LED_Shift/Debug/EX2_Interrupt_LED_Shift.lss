
EX2_Interrupt_LED_Shift.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000158  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e1  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081e  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030f  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000440  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ae  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001bd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	85 c0       	rjmp	.+266    	; 0x110 <__vector_1>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	8e c0       	rjmp	.+284    	; 0x132 <__vector_5>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	4f c0       	rjmp	.+158    	; 0x154 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
volatile unsigned char Shift_flag = 1;

int main(void){
	unsigned char LED_Data = 0x01;

	DDRA = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
  bc:	11 ba       	out	0x11, r1	; 17
	DDRE = 0x00;
  be:	12 b8       	out	0x02, r1	; 2

	EICRA = 0x02;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB = 0x03;
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	8a bf       	out	0x3a, r24	; 58

	EIMSK = 0x11;
  ca:	81 e1       	ldi	r24, 0x11	; 17
  cc:	89 bf       	out	0x39, r24	; 57
	EIFR = 0x11;
  ce:	88 bf       	out	0x38, r24	; 56

	sei();
  d0:	78 94       	sei
#include <util/delay.h>

volatile unsigned char Shift_flag = 1;

int main(void){
	unsigned char LED_Data = 0x01;
  d2:	81 e0       	ldi	r24, 0x01	; 1
	EIFR = 0x11;

	sei();

	while(1){
		PORTA = LED_Data;
  d4:	8b bb       	out	0x1b, r24	; 27
		if(Shift_flag == 1){
  d6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <Shift_flag>
  da:	91 30       	cpi	r25, 0x01	; 1
  dc:	21 f4       	brne	.+8      	; 0xe6 <main+0x2e>
			if(LED_Data == 0x80)
  de:	80 38       	cpi	r24, 0x80	; 128
  e0:	51 f0       	breq	.+20     	; 0xf6 <main+0x3e>
				LED_Data = 0x01;

			else LED_Data <<= 1;
  e2:	88 0f       	add	r24, r24
  e4:	0b c0       	rjmp	.+22     	; 0xfc <main+0x44>
		}
		else if(Shift_flag == 2){
  e6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <Shift_flag>
  ea:	92 30       	cpi	r25, 0x02	; 2
  ec:	39 f4       	brne	.+14     	; 0xfc <main+0x44>
			if(LED_Data== 0x01)
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	21 f0       	breq	.+8      	; 0xfa <main+0x42>
				LED_Data = 0x80;
			else
				LED_Data >>= 1;
  f2:	86 95       	lsr	r24
  f4:	03 c0       	rjmp	.+6      	; 0xfc <main+0x44>

	while(1){
		PORTA = LED_Data;
		if(Shift_flag == 1){
			if(LED_Data == 0x80)
				LED_Data = 0x01;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	01 c0       	rjmp	.+2      	; 0xfc <main+0x44>

			else LED_Data <<= 1;
		}
		else if(Shift_flag == 2){
			if(LED_Data== 0x01)
				LED_Data = 0x80;
  fa:	80 e8       	ldi	r24, 0x80	; 128
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	3f e3       	ldi	r19, 0x3F	; 63
 100:	92 e0       	ldi	r25, 0x02	; 2
 102:	21 50       	subi	r18, 0x01	; 1
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x4a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x54>
 10c:	00 00       	nop
 10e:	e2 cf       	rjmp	.-60     	; 0xd4 <main+0x1c>

00000110 <__vector_1>:
		}
		_delay_ms(100);
	}
}

SIGNAL(INT0_vect){
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
	cli();
 11c:	f8 94       	cli
	Shift_flag = 1;
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Shift_flag>
	sei();
 124:	78 94       	sei
}
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_5>:

SIGNAL(INT4_vect){
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
	cli();
 13e:	f8 94       	cli
	Shift_flag = 2;
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Shift_flag>
	sei();
 146:	78 94       	sei
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
