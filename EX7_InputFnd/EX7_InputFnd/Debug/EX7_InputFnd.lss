
EX7_InputFnd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000190  00000204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091b  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000854  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000321  00000000  00000000  0000141f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000431  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000217  00000000  00000000  00001bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e9       	ldi	r30, 0x90	; 144
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	2f d0       	rcall	.+94     	; 0x112 <main>
  b4:	6b c0       	rjmp	.+214    	; 0x18c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <Count_TR>:
	}
}

int Count_TR(unsigned char flag){
	int count = 0;
	switch(flag){
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	f9 f0       	breq	.+62     	; 0xfa <Count_TR+0x42>
  bc:	48 f4       	brcc	.+18     	; 0xd0 <Count_TR+0x18>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	b1 f0       	breq	.+44     	; 0xee <Count_TR+0x36>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	b9 f0       	breq	.+46     	; 0xf4 <Count_TR+0x3c>
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	09 f5       	brne	.+66     	; 0x10c <Count_TR+0x54>
		case 0x01:
			count = 1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	08 95       	ret
	}
}

int Count_TR(unsigned char flag){
	int count = 0;
	switch(flag){
  d0:	80 32       	cpi	r24, 0x20	; 32
  d2:	b1 f0       	breq	.+44     	; 0x100 <Count_TR+0x48>
  d4:	28 f4       	brcc	.+10     	; 0xe0 <Count_TR+0x28>
  d6:	80 31       	cpi	r24, 0x10	; 16
  d8:	c9 f4       	brne	.+50     	; 0x10c <Count_TR+0x54>
			break;
		case 0x08:
			count = 4;
			break;
		case 0x10:
			count = -1;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	9f ef       	ldi	r25, 0xFF	; 255
			break;
  de:	08 95       	ret
	}
}

int Count_TR(unsigned char flag){
	int count = 0;
	switch(flag){
  e0:	80 34       	cpi	r24, 0x40	; 64
  e2:	89 f0       	breq	.+34     	; 0x106 <Count_TR+0x4e>
  e4:	80 38       	cpi	r24, 0x80	; 128
  e6:	91 f4       	brne	.+36     	; 0x10c <Count_TR+0x54>
			break;
		case 0x40:
			count = -3;
			break;
		case 0x80:
			count = -4;
  e8:	8c ef       	ldi	r24, 0xFC	; 252
  ea:	9f ef       	ldi	r25, 0xFF	; 255
			break;
  ec:	08 95       	ret
	switch(flag){
		case 0x01:
			count = 1;
			break;
		case 0x02:
			count = 2;
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	90 e0       	ldi	r25, 0x00	; 0
			break;
  f2:	08 95       	ret
		case 0x04:
			count = 3;
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	90 e0       	ldi	r25, 0x00	; 0
			break;
  f8:	08 95       	ret
		case 0x08:
			count = 4;
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	90 e0       	ldi	r25, 0x00	; 0
			break;
  fe:	08 95       	ret
		case 0x10:
			count = -1;
			break;
		case 0x20:
			count = -2;
 100:	8e ef       	ldi	r24, 0xFE	; 254
 102:	9f ef       	ldi	r25, 0xFF	; 255
			break;
 104:	08 95       	ret
		case 0x40:
			count = -3;
 106:	8d ef       	ldi	r24, 0xFD	; 253
 108:	9f ef       	ldi	r25, 0xFF	; 255
			break;
 10a:	08 95       	ret
		_delay_ms(200);
	}
}

int Count_TR(unsigned char flag){
	int count = 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
		case 0x80:
			count = -4;
			break;
	}
	return count;
 110:	08 95       	ret

00000112 <main>:
#include <avr/io.h>
#include <util/delay.h>

int Count_TR(unsigned char flag);

int main(){
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	62 97       	sbiw	r28, 0x12	; 18
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
								//     0	1		2	3		4	5	  6		7	  8		9	  A		B		c	d	  e		f	
	unsigned char FND_DATA_TBL [] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, 0x88, 0x80};
 126:	82 e1       	ldi	r24, 0x12	; 18
 128:	e0 e0       	ldi	r30, 0x00	; 0
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	de 01       	movw	r26, r28
 12e:	11 96       	adiw	r26, 0x01	; 1
 130:	01 90       	ld	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	8a 95       	dec	r24
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x1e>

	int cnt = 0;
	unsigned char Switch_flag = 0;

	DDRA = 0xff;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
 13c:	11 ba       	out	0x11, r1	; 17

int main(){
								//     0	1		2	3		4	5	  6		7	  8		9	  A		B		c	d	  e		f	
	unsigned char FND_DATA_TBL [] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, 0x88, 0x80};

	int cnt = 0;
 13e:	00 e0       	ldi	r16, 0x00	; 0
 140:	10 e0       	ldi	r17, 0x00	; 0

	DDRA = 0xff;
	DDRD = 0x00;

	while(1){
		Switch_flag = PIND;
 142:	80 b3       	in	r24, 0x10	; 16
		while(PIND != 0x00);
 144:	90 b3       	in	r25, 0x10	; 16
 146:	91 11       	cpse	r25, r1
 148:	fd cf       	rjmp	.-6      	; 0x144 <main+0x32>

		if(Switch_flag != 0)
 14a:	88 23       	and	r24, r24
 14c:	29 f0       	breq	.+10     	; 0x158 <main+0x46>
			cnt += Count_TR(Switch_flag);
 14e:	b4 df       	rcall	.-152    	; 0xb8 <Count_TR>
 150:	08 0f       	add	r16, r24
 152:	19 1f       	adc	r17, r25

		if(cnt < 0){
 154:	17 fd       	sbrc	r17, 7
 156:	06 c0       	rjmp	.+12     	; 0x164 <main+0x52>
 158:	00 31       	cpi	r16, 0x10	; 16
 15a:	11 05       	cpc	r17, r1
 15c:	2c f0       	brlt	.+10     	; 0x168 <main+0x56>
 15e:	0f e0       	ldi	r16, 0x0F	; 15
 160:	10 e0       	ldi	r17, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <main+0x56>
			cnt = 0;
 164:	00 e0       	ldi	r16, 0x00	; 0
 166:	10 e0       	ldi	r17, 0x00	; 0

		else if(cnt > 15){
			cnt = 15;
		}

		PORTA = FND_DATA_TBL[cnt];
 168:	e1 e0       	ldi	r30, 0x01	; 1
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	e0 0f       	add	r30, r16
 172:	f1 1f       	adc	r31, r17
 174:	80 81       	ld	r24, Z
 176:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	8f e7       	ldi	r24, 0x7F	; 127
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x6c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x76>
 188:	00 00       	nop
 18a:	db cf       	rjmp	.-74     	; 0x142 <main+0x30>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
